{"ast":null,"code":"import { extend } from '../../shared/utils.js';\nvar isGridEnabled = function isGridEnabled(swiper, params) {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\nexport default function setBreakpoint() {\n  var swiper = this;\n  var activeIndex = swiper.activeIndex,\n    initialized = swiper.initialized,\n    _swiper$loopedSlides = swiper.loopedSlides,\n    loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,\n    params = swiper.params,\n    $el = swiper.$el;\n  var breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  var breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  var wasMultiRow = isGridEnabled(swiper, params);\n  var isMultiRow = isGridEnabled(swiper, breakpointParams);\n  var wasEnabled = params.enabled;\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(\"\".concat(params.containerModifierClass, \"grid \").concat(params.containerModifierClass, \"grid-column\"));\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(\"\".concat(params.containerModifierClass, \"grid\"));\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(\"\".concat(params.containerModifierClass, \"grid-column\"));\n    }\n    swiper.emitContainerClasses();\n  } // Toggle navigation, pagination, scrollbar\n\n  ['navigation', 'pagination', 'scrollbar'].forEach(function (prop) {\n    var wasModuleEnabled = params[prop] && params[prop].enabled;\n    var isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n  extend(swiper.params, breakpointParams);\n  var isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n  swiper.emit('breakpoint', breakpointParams);\n}","map":null,"metadata":{},"sourceType":"module"}